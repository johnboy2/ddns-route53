## The fully-qualified domain name of the resource-record to update.
host_name = "home.example.com"

## Define the credentials to use when communicating with AWS Route53.
## These are all optional, and will fallback on defaults found in standard
## AWS environment variables or configuration files. For more information, see
## https://docs.aws.amazon.com/sdkref/latest/guide/creds-config-files.html
#aws_profile = "default"
#aws_access_key_id = "AKIAIOSFODNN7EXAMPLE"
#aws_secret_access_key = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
#aws_region = "us-east-1"  # Optional, but may slightly improve performance.

## The zone ID of the Route53-hosted zone where `host_name` is hosted. This is
## an optimization only, and can be omitted. If omitted, this will be determined
## through a dynamic runtime search -- which the connecting SDK user must have
## permission to perform.
aws_route53_zone_id = "ABCDEF12345678"

## The "time to live", or TTL, for any DNS record changes made by this utility,
## in seconds. Typical values for this are 3600 (i.e., one hour) or similar,
## but any value between 0 and 2147483647 is allowed.
aws_route53_record_ttl = 60

## Configure how the public IP address should be determined. This is a list of
## algorithms to use, and the order in which to use them. Each one is tried in
## sequence until one succeeds, or all have failed. If all algorithms fail, or
## if the algorithm list for a given IP version is empty, then the tool
## behaves as though the system does not have a public IP address using that
## IP version.
##
## The available algorithms are as follows:
##   - "default_public_ip" means that IP addresses on the system are checked
##     for any that are globally routable. If any are found, they are used and
##     searching stops.
##   - "internet_gateway_protocol" performs a local network search for a router
##     or other Internet gateway device with a WAN IP address that is globally
##     routable. If any are found, they are used and searching stops.
##     NOTE: This option only applies to `ipv4_algorithms`.
##   - "web_service" connects to a URL of a public site that is expected to
##     return our public IP address. If we get an address back that is globally
##     routable, it is returned and searching stops.
##   - "plugin" runs a local command that is expected to return our public IP
##     addresss. If we get an address back that is globally routable, it is
##     returned and searching stops. The command to run can be specified either
##     as a single string (which will be executed via the system shell) -- or
##     as a list of strings (which will be executed directly).

ipv4_algorithms = [
    {type="default_public_ip"},
    {type="internet_gateway_protocol", timeout_seconds=10},
    {type="web_service", url="http://checkip.amazonaws.com/", timeout_seconds=10},
    {type="web_service", url="https://api.ipify.org/", timeout_seconds=10},
    {type="plugin", command="/usr/local/bin/get_my_public_ipv4.py", timeout_seconds=10},
]
ipv6_algorithms = [  # optional (default: [])
    {type="default_public_ip"},
    {type="web_service", url="https://api6.ipify.org/", timeout_seconds=10},
    {type="plugin", command="/usr/local/bin/get_my_public_ipv6.py", timeout_seconds=10},
]

## Configures how long after submitting a change to wait for it to be fully
## synchronized with Route53's nameservers, and how often to re-check.
## These default to a timeout of 300 seconds, polling every 30 seconds.
update_timeout_seconds = 300
update_poll_seconds = 30

## Optional log file
log_file = "ddns-route53.log"

## When using a log-file, these set the logging-level of the tool itself
## (`log_level`) and other libraries it uses internally (`log_level_other`).
## Each must be one of "off", "error", "warn", "info", "debug", or "trace".
## NOTE: These settings do *NOT* affect console-output verbosity, which is
## controlled instead by CLI options.
log_level = "debug"  # default: "info"
log_level_other = "warn"  # default: "warn"
